#뱀

n = int(input()) # 맵 정보
k = int(input()) # 사과의 개수
info = [] #방향 회전 정보

board = [[0]* ( n + 1 ) for _ in range(n+1)]

#사과가 있는곳 위치
for _ in range(k):
	a, b = map(int, input().split())
	board[a][b] = 1

#방향 정보 입력
l = int(input())
for _ in range(l):
	x, c = input().split()
	info.append((int(x), c))


dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]

def simulate():
	x, y= 1, 1 #뱀의 머리 위치
	board[x][y] = 2 #뱀의 위치 2
	direction = 0 #처음에는 동쪽
	time = 0
	index = 0
	q = [(x, y)]
	while True:
		nx = x + dx[direction]
		ny = y + dy[direction]
		#맵 범위 안에 있고, 뱀의 몸통이 없는 위치
		if 1 <= nx and nx <= n and 1 <= ny and ny <= n and board[nx][ny] != 2:
			#사과가 없다면 이동후에 꼬리제거
			if board[nx][ny] == 0:
				board[nx][ny] = 2
				q.append((nx, ny))
				px, py = q.pop(0)
				board[px][py] = 0
			#사과가 있다면 이동 후에 꼬리 그대로 두기
			if board[nx][ny] == 1:
				board[nx][ny] = 2
				q.append((ny, ny))
		else:
			time += 1
			break
		x, y = nx, ny
		time +=1
		if index < 1 and time == info[index][0]:
			direction = turn(direction, info[index][1])
			index += 1
	return time

def turn(direction, c):
	if c == "L":
		direction = (direction - 1) %4
	else:
		direction = (direction + 1) %4
	return direction	


print(simulate())
